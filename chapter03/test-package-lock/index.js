// 프로젝트 패키지 잠금
// npm 에 등록된 패키지들은 엄격하게 관리가 되고 있지 않은 오픈 소스가 대부분이다.
// 하위 호환에 대한 검증을 npm 에서도 진행하지 않기 때문에 패치 버전으로 변경되엇는데도 동작하지 않는 경우가 많다.
// 이 때, 올바르게 동작하는 버전을 고정시키는 것이 중요하다.
// package-lock.json 에 패키지의 의존성 트리정보를 저장해두고, npm 은 설치시에 package.json 이 아니라
// package-lock.json 을 확인하고 설치한다.

// 예를 들어, npm install ora 를 하였을 때 많은 패키지가 추가되고, 취약점을 점검한다.
// 의존성 트리를 쭉 따라가면서 설치하기 때문이다.

// npm ls --depth='number' 를 이용하여 의존성 트리를 볼 수 있는데, 이 때 deduped 는 중복되어 삭제했다는 뜻이다.

// npm install 할 때 해당 모듈이 필요한지 아닌지는 npm 에서 알아서 판단해 설치한다.
// 하지만 문제점은 패키지를 볼러올 때 node_modules 가 하나가 아니라는 점과 중복된 의존성 패키지를 위로 뜰어올리는 전략은
// package.json 에는 정의하지 않은 의존성 패키지를 사용할 수 있게 해준다는 것이다. 이를 유령 의존성이라고 하는데,
// 정의하지 않았는데 사용할 수 있는 것이 직관적이지 않다는 부분에서 좋지 않다.

// 그러므로 Node.js 개발 시에는 패키지 의존성을 최소화하는 것이 제일 중요하다고 할 수 있다.

// npm ci 는 clean install 로 다른 패키지 버전이 설치되는 경우를 방지하기 위해서 사용된다.
// package.json 과 package-lock.json 의 버전이 일치하는지 확인한다. 다르면 에러발생

// npm ci 는 개발에서 사용한 패키지 그대로 테스트 서버나, 프로덕션 환경에 사용될 때 이다.

